name: Test Suite

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        go-version: [1.21, 1.22]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Verify dependencies
      run: go mod verify
      
    - name: Run unit tests
      run: |
        go test -v -race -coverprofile=coverage.out ./...
        
    - name: Generate coverage report
      run: go tool cover -html=coverage.out -o coverage.html
      
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-go${{ matrix.go-version }}
        path: |
          coverage.out
          coverage.html
        retention-days: 30
        
    - name: Check coverage threshold
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
        echo "Total coverage: ${COVERAGE}%"
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "Coverage ${COVERAGE}% is below 80% threshold"
          exit 1
        fi

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
        
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m
        
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
        
    - name: Run govulncheck (Official Go Vulnerability Scanner)
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...
        
    - name: Run Semgrep Security Scanner
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/golang
          p/owasp-top-ten
          p/secrets
        
    - name: Upload Semgrep results to GitHub
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: semgrep.sarif
        
    - name: Run staticcheck for additional Go analysis
      uses: dominikh/staticcheck-action@v1.3.0
      with:
        version: "2023.1.6"
        install-go: false

  build:
    name: Build Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
        
    - name: Build all binaries
      run: |
        echo "Building thermostat service..."
        go build -v ./cmd/thermostat
        
        echo "Building motion service..."
        go build -v ./cmd/motion
        
        echo "Building light service..."
        go build -v ./cmd/light
        
        echo "Building integrated service..."
        go build -v ./cmd/integrated
        
        echo "Building server..."
        go build -v ./cmd/server
        
        echo "Building CLI..."
        go build -v ./cmd/cli
        
    - name: Verify build artifacts
      run: |
        ls -la thermostat motion light integrated server cli
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries
        path: |
          thermostat
          motion
          light
          integrated
          server
          cli
        retention-days: 7

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      mosquitto:
        image: eclipse-mosquitto:2
        ports:
          - 1883:1883
        options: >-
          --health-cmd "mosquitto_pub -h localhost -t test -m test"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
        
    - name: Wait for services
      run: |
        echo "Waiting for MQTT broker..."
        timeout 30 bash -c 'until nc -z localhost 1883; do sleep 1; done'
        
        echo "Waiting for Redis..."
        timeout 30 bash -c 'until nc -z localhost 6379; do sleep 1; done'
        
    - name: Run integration tests
      env:
        MQTT_BROKER: localhost:1883
        REDIS_URL: redis://localhost:6379
      run: |
        # Run tests with integration tag
        go test -v -tags=integration ./test/...
        
    - name: Test MQTT connectivity
      run: |
        # Install mosquitto clients
        sudo apt-get update
        sudo apt-get install -y mosquitto-clients
        
        # Test MQTT pub/sub
        mosquitto_pub -h localhost -p 1883 -t "test/topic" -m "test message"
        timeout 5 mosquitto_sub -h localhost -p 1883 -t "test/topic" -C 1

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -t home-automation:test .
        
    - name: Test Docker image
      run: |
        # Run a quick smoke test
        docker run --rm home-automation:test --version || true
        
    - name: Check image size
      run: |
        docker images home-automation:test
        SIZE=$(docker images home-automation:test --format "table {{.Size}}" | tail -1)
        echo "Docker image size: $SIZE"

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, lint, security, build, integration-test, docker-build]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        if [[ "${{ needs.test.result }}" == "failure" ]]; then
          echo "❌ Unit tests failed"
          exit 1
        elif [[ "${{ needs.lint.result }}" == "failure" ]]; then
          echo "❌ Linting failed"
          exit 1
        elif [[ "${{ needs.security.result }}" == "failure" ]]; then
          echo "❌ Security scan failed"
          exit 1
        elif [[ "${{ needs.build.result }}" == "failure" ]]; then
          echo "❌ Build failed"
          exit 1
        elif [[ "${{ needs.integration-test.result }}" == "failure" ]]; then
          echo "❌ Integration tests failed"
          exit 1
        elif [[ "${{ needs.docker-build.result }}" == "failure" ]]; then
          echo "❌ Docker build failed"
          exit 1
        else
          echo "✅ All checks passed!"
        fi
