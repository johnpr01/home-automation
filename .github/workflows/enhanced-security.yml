name: Enhanced Security

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM

jobs:
  vulnerability-scan:
    name: Vulnerability Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-security-${{ hashFiles('**/go.sum') }}
        
    - name: Install govulncheck (Official Go Vulnerability Scanner)
      run: go install golang.org/x/vuln/cmd/govulncheck@latest
      
    - name: Run govulncheck on source code
      run: |
        echo "üîç Scanning source code for vulnerabilities..."
        govulncheck ./...
        
    - name: Run govulncheck on binaries
      run: |
        echo "üî® Building and scanning binaries..."
        go build -o bin/thermostat ./cmd/thermostat
        go build -o bin/motion ./cmd/motion
        go build -o bin/light ./cmd/light
        go build -o bin/integrated ./cmd/integrated
        
        echo "üîç Scanning built binaries..."
        govulncheck -mode=binary ./bin/thermostat
        govulncheck -mode=binary ./bin/motion
        govulncheck -mode=binary ./bin/light
        govulncheck -mode=binary ./bin/integrated
        
    - name: Install Trivy vulnerability scanner
      run: |
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy
        
    - name: Run Trivy filesystem scan
      run: |
        echo "üîç Scanning filesystem for vulnerabilities..."
        trivy fs --exit-code 1 --severity HIGH,CRITICAL .
        
    - name: Run additional dependency vulnerability scan
      run: |
        echo "üì¶ Running comprehensive dependency vulnerability scan..."
        
        echo "üîç Scanning all dependencies with govulncheck..."
        govulncheck -scan=module ./...

  static-analysis:
    name: Static Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
        
    - name: Run Semgrep
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/golang
          p/owasp-top-ten
          p/secrets
          p/sql-injection
          p/xss
          
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: go
        queries: security-and-quality
        
    - name: Autobuild for CodeQL
      uses: github/codeql-action/autobuild@v2
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      
    - name: Run staticcheck
      uses: dominikh/staticcheck-action@v1.3.0
      with:
        version: "2023.1.6"
        install-go: false
        
    - name: Run gosec (alternative to Gosec action)
      run: |
        echo "üì¶ Installing gosec..."
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        
        echo "üîç Running gosec security scan..."
        gosec -fmt sarif -out gosec.sarif ./...
        
        echo "üìä Generating readable report..."
        gosec -fmt json -out gosec.json ./...
        gosec ./...
        
    - name: Upload gosec SARIF
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: gosec.sarif

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better secret detection
        
    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        
    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image for scanning
      run: |
        docker build -t home-automation:security-scan .
        
    - name: Run Trivy Docker scan
      run: |
        # Install trivy
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy
        
        # Scan Docker image
        trivy image --exit-code 1 --severity HIGH,CRITICAL home-automation:security-scan
        
    - name: Run Docker Bench Security
      run: |
        git clone https://github.com/docker/docker-bench-security.git
        cd docker-bench-security
        sudo sh docker-bench-security.sh

  security-report:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [vulnerability-scan, static-analysis, secrets-scan, docker-security]
    if: always()
    
    steps:
    - name: Security Status Summary
      run: |
        echo "üõ°Ô∏è Security Scan Results Summary"
        echo "================================"
        
        if [[ "${{ needs.vulnerability-scan.result }}" == "success" ]]; then
          echo "‚úÖ Vulnerability Scan: PASSED"
        else
          echo "‚ùå Vulnerability Scan: FAILED"
        fi
        
        if [[ "${{ needs.static-analysis.result }}" == "success" ]]; then
          echo "‚úÖ Static Analysis: PASSED"
        else
          echo "‚ùå Static Analysis: FAILED"
        fi
        
        if [[ "${{ needs.secrets-scan.result }}" == "success" ]]; then
          echo "‚úÖ Secrets Detection: PASSED"
        else
          echo "‚ùå Secrets Detection: FAILED"
        fi
        
        if [[ "${{ needs.docker-security.result }}" == "success" ]]; then
          echo "‚úÖ Docker Security: PASSED"
        else
          echo "‚ùå Docker Security: FAILED"
        fi
        
        echo ""
        echo "üîç Security Tools Used:"
        echo "- govulncheck (Official Go vulnerability scanner)"
        echo "- Semgrep (Multi-language static analysis)"
        echo "- CodeQL (GitHub's security analysis)"
        echo "- staticcheck (Go static analyzer)"
        echo "- gosec (Go security checker)"
        echo "- GitLeaks (Secret detection)"
        echo "- TruffleHog (Secret scanning)"
        echo "- Trivy (Vulnerability scanner)"
        echo "- Docker Bench Security"
        
        # Fail if any critical security check failed
        if [[ "${{ needs.vulnerability-scan.result }}" == "failure" ]] || 
           [[ "${{ needs.static-analysis.result }}" == "failure" ]] || 
           [[ "${{ needs.secrets-scan.result }}" == "failure" ]]; then
          echo ""
          echo "‚ùå Critical security issues detected!"
          exit 1
        else
          echo ""
          echo "‚úÖ All security checks passed!"
        fi
