#!/bin/bash
### BEGIN INIT INFO
# Provides:          home-automation-standalone
# Required-Start:    $local_fs $network
# Required-Stop:     $local_fs $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Home Automation System (Standalone)
# Description:       Home Automation System Standalone Binary
### END INIT INFO

# Author: Home Automation Team

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Home Automation System (Standalone)"
NAME=home-automation-standalone
DAEMON=/opt/home-automation/bin/home-automation-server
DAEMON_ARGS=""
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
WORKDIR=/opt/home-automation
USER=pi
GROUP=pi

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions
. /lib/lsb/init-functions

do_start()
{
    start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
        || return 1
    
    # Create necessary directories
    mkdir -p $WORKDIR/data $WORKDIR/logs
    chown $USER:$GROUP $WORKDIR/data $WORKDIR/logs
    
    # Source environment files
    [ -r /etc/default/$NAME ] && . /etc/default/$NAME
    [ -r $WORKDIR/.env ] && . $WORKDIR/.env
    
    start-stop-daemon --start --quiet --chuid $USER:$GROUP --chdir $WORKDIR \
        --background --make-pidfile --pidfile $PIDFILE --exec $DAEMON -- $DAEMON_ARGS \
        || return 2
    
    return 0
}

do_stop()
{
    start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $(basename $DAEMON)
    RETVAL="$?"
    [ "$RETVAL" = 2 ] && return 2
    
    start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
    [ "$?" = 2 ] && return 2
    
    rm -f $PIDFILE
    return "$RETVAL"
}

do_reload() {
    start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $(basename $DAEMON)
    return 0
}

case "$1" in
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
    do_start
    case "$?" in
        0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  stop)
    [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
    do_stop
    case "$?" in
        0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  status)
    if [ -f $PIDFILE ]; then
        if ps -p $(cat $PIDFILE) > /dev/null 2>&1; then
            echo "$NAME is running (PID: $(cat $PIDFILE))"
            exit 0
        else
            echo "$NAME PID file exists but process is not running"
            exit 1
        fi
    else
        echo "$NAME is not running"
        exit 3
    fi
    ;;
  restart|force-reload)
    log_daemon_msg "Restarting $DESC" "$NAME"
    do_stop
    case "$?" in
      0|1)
        do_start
        case "$?" in
            0) log_end_msg 0 ;;
            1) log_end_msg 1 ;;
            *) log_end_msg 1 ;;
        esac
        ;;
      *)
        log_end_msg 1
        ;;
    esac
    ;;
  *)
    echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
    exit 3
    ;;
esac

:
