#!/bin/bash
### BEGIN INIT INFO
# Provides:          home-automation
# Required-Start:    $local_fs $network $docker
# Required-Stop:     $local_fs $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Home Automation System
# Description:       Home Automation System with Docker Compose
### END INIT INFO

# Author: Home Automation Team

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Home Automation System"
NAME=home-automation
DAEMON=/usr/bin/docker
DAEMON_ARGS="compose up -d"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
WORKDIR=/opt/home-automation
USER=pi
GROUP=pi

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
    # Return
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   2 if daemon could not be started
    
    start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
        || return 1
    
    # Check if Docker is running
    if ! docker info >/dev/null 2>&1; then
        log_daemon_msg "Docker is not running"
        return 2
    fi
    
    # Change to working directory
    cd $WORKDIR || return 2
    
    # Source environment files
    [ -r /etc/default/$NAME ] && . /etc/default/$NAME
    [ -r $WORKDIR/.env ] && . $WORKDIR/.env
    
    # Start daemon
    start-stop-daemon --start --quiet --chuid $USER:$GROUP --chdir $WORKDIR \
        --background --make-pidfile --pidfile $PIDFILE --exec $DAEMON -- $DAEMON_ARGS \
        || return 2
    
    sleep 2
    return 0
}

#
# Function that stops the daemon/service
#
do_stop()
{
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    
    cd $WORKDIR || return 2
    
    # Stop Docker Compose services
    su $USER -c "docker compose down" || return 2
    
    # Remove PID file
    rm -f $PIDFILE
    return 0
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
    cd $WORKDIR || return 2
    su $USER -c "docker compose restart" || return 2
    return 0
}

case "$1" in
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
    do_start
    case "$?" in
        0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  stop)
    [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
    do_stop
    case "$?" in
        0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  status)
    if [ -f $PIDFILE ]; then
        echo "$NAME is running (PID: $(cat $PIDFILE))"
        exit 0
    else
        echo "$NAME is not running"
        exit 1
    fi
    ;;
  restart|force-reload)
    log_daemon_msg "Restarting $DESC" "$NAME"
    do_stop
    case "$?" in
      0|1)
        do_start
        case "$?" in
            0) log_end_msg 0 ;;
            1) log_end_msg 1 ;; # Old process is still running
            *) log_end_msg 1 ;; # Failed to start
        esac
        ;;
      *)
        # Failed to stop
        log_end_msg 1
        ;;
    esac
    ;;
  *)
    echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
    exit 3
    ;;
esac

:
